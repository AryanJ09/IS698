AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy EC2, RDS, and Lambda with custom VPC and subnets

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to launch resources in
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet for EC2 and Lambda
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: A second subnet in a different AZ for RDS

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      DBSubnetGroupName: rds-subnet-group

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: mydbinstance
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: Password123!
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0953476d60561c955
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MySampleLambda
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  "statusCode": 200,
                  "body": json.dumps("Hello from Lambda!")
              }
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
        SecurityGroupIds:
          - !Ref EC2SecurityGroup

Outputs:
  EC2PublicIP:
    Description: Public IP of EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp

  RDSInstanceEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt MyDBInstance.Endpoint.Address

  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !Ref MyLambdaFunction
